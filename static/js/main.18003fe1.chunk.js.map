{"version":3,"sources":["Components/GridElement/index.tsx","Components/GridRow/index.tsx","Components/Button/index.tsx","Components/InteractiveGrid/index.tsx","Home.tsx","App.js","reportWebVitals.js","index.js"],"names":["GridElement","props","style","color","className","GridRow","useState","animation","setAnimation","state","elementList","Array","cols","fill","map","ele","onAnimationIteration","Button","onClick","text","row","InteractiveGrid","rows","setRows","input","setInput","rowList","updatedRows","addRow","onSubmit","e","preventDefault","Number","length","i","stabilize","type","onChange","target","value","placeholder","Home","setCols","number","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.18003fe1.chunk.js","sourcesContent":["\ninterface ElementProps {\n  color:string,\n}\n\nfunction GridElement(props: ElementProps){\n\n  const style =`bg-${props.color} rounded-full w-20 h-20 m-3`\n  return (\n    <div className={style} />\n  )\n}\n\nexport default GridElement","import { useState } from 'react';\nimport GridElement from '../GridElement';\n\ninterface RowProps {\n  cols: number,\n  state:\"stable\"|\"unstable\"\n}\n\nfunction GridRow(props: RowProps) {\n  \n  const [animation,setAnimation] = useState(\"animate-jump\")\n\n  function handleAnimationIteration(){\n    if(props.state === \"stable\"){\n      setAnimation(\"animate-kill\")\n    }\n  }\n\n  let color:string;\n\n\n  switch(props.state){\n    case \"unstable\":\n      color = \"primary\"\n      break;\n    case \"stable\":\n      color= \"secondary\"\n      break;\n  }\n\n  const style = 'flex '+animation;\n\n  const elements = Array(props.cols).fill({ color: color });\n\n  const elementList = elements.map(ele => (\n    <GridElement\n      color={ele.color}\n    />\n  ));\n\n  return (\n    <div className={style} onAnimationIteration={() => handleAnimationIteration()}>\n      {elementList}\n    </div>\n  )\n}\n\nexport default GridRow;","\ninterface ButtonProps{\n  text:string,\n  onClick: Function\n}\n\nfunction Button(props:ButtonProps) {\n\n  return (\n    <button className=\"h-10 px-5 text-secondary transition-colors duration-150 border border-pr rounded-lg focus:shadow-outline hover:bg-primary hover:text-background active:bg-darkPrimary\"\n      onClick={()=>props.onClick()}>\n      {props.text}\n    </button>\n  )\n\n}\n\nexport default Button;\n","import { ChangeEvent, FormEvent, useState } from 'react'\nimport GridRow from '../GridRow'\nimport Button from '../Button'\n\ninterface InteractiveGridProps {\n  cols: number\n}\n\ninterface Row {\n  state: \"stable\" | \"unstable\"\n}\n\nconst row: Row = {\n  state: \"unstable\"\n}\n\n\nfunction InteractiveGrid(props: InteractiveGridProps) {\n\n  const [rows, setRows] = useState(Array<Row>({ ...row }));\n  const [input, setInput] = useState('')\n\n\n  const rowList = rows.map(row => (\n    <GridRow cols={props.cols} state={row.state} />\n  ))\n\n  function addRow() {\n    const updatedRows = [...rows, { ...row }]\n    setRows(updatedRows)\n  }\n\n  function stabilize() {\n    const updatedRows = [...rows]\n    for (let i = 0; i < rows.length; i++) {\n      updatedRows[i].state = \"stable\";\n    }\n    setRows(updatedRows)\n  }\n\n  function handleSubmit(e: FormEvent<HTMLFormElement>) {\n    e.preventDefault()\n    if(Number(input)===(props.cols*rows.length)){\n      stabilize()\n      setInput('');\n    }\n  }\n\n  function handleChange(e:ChangeEvent<HTMLInputElement>){\n    setInput(e.target.value)\n  }\n\n\n\n  return (\n    <div className=\"flex w-auto h-auto flex-col justify-start items-center m-10\">\n      {rowList}\n      <div className=\"flex justify-center space-x-3\">\n      <Button text=\"+\" onClick={() => addRow()} />\n      <form onSubmit={handleSubmit}>\n        <input type='text'\n          className=\"border border-transparent outline-none rounded-lg text-center h-10\"\n          onChange={handleChange}\n          placeholder=\"current number\" \n          value={input}/>\n      </form>\n      </div>\n\n    </div>\n  )\n}\n\nexport default InteractiveGrid;\n","import { useState } from 'react'\nimport InteractiveGrid from './Components/InteractiveGrid'\nimport Button from './Components/Button'\n\nfunction Home() {\n\n\n  const [cols, setCols] = useState(5);\n  const options = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\n  return (<div className='flex flex-col items-center'>\n    <h1 className=\"text-5xl m-4\"><strong>Multiplication Grid</strong></h1>\n    <hr className='w-1/2'/>\n    <h2 className=\"text-3xl mt-4\">Demo</h2>\n    <InteractiveGrid cols={cols} />\n    <div className='flex flex-col items-center space-y-3'>\n      <div className='flex justify-center space-x-3'>\n        {options.map(number => (\n          <Button text={`${number}`} onClick={() => setCols(number)} />\n        ))}\n      </div>\n    </div>\n\n    <h2 className='text-3xl mt-4 text-left'><strong>Explanation</strong></h2>\n    <div className='w-1/2 text-left'>\n    <p className=\"my-4\">\n      Understanding the grid representation of multiplication helps draw the link between multiplication and repeated addition. <br /><br />\n      \n      Often students are shown this representation on paper or loose dots that they can move around on the table. This representation is usually quickly discarded because it is too cumbersome to represent efficient multiplication strategies. \n      </p>\n      \n      <p>\n      <strong>However</strong>, making the representation digital allows the visual representation to stay relevant and usable when learning multiplication strategies such as doubling or tripling. \n    </p>\n    <h2 className=\"my-4 text-3xl text-left\">Example Usage</h2>\n    <p className='text-left'><strong>Represent 3 groups of 5:</strong></p>\n    <ol className=\"list-decimal ml-4\">\n      <li>Click the \"+\" button to add a row</li>\n      <li>Stabilize the dots by typing the current about of dots into the answer box.</li>\n      <li>Repeat until you have shown 5 groups of 3.</li>\n    </ol>\n    <br />\n    <p>The idea is that the tutor and student interact with each other while using the grid as a reference point.</p>\n  </div>\n  <br /><br />\n  </div>\n  )\n}\n\n\nexport default Home;","import Home from \"./Home.tsx\";\n\nfunction App() {\n  return (\n    <div>\n          <Home />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}